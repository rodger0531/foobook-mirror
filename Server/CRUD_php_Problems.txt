circle: 
- are we going to allow users to create their own circles if yes we need to add to the table a field to list the friends you would like to have in this circle (currently we don't have this option)
- correct me if I am wrong but currently there is no option for the user to create his own circle. We haven't considered this option I think. Currently the system assignes you circles based on who are you family/school/work members right?
- Currently the system should generate circles for you based on who do you mark as your sibling/collegue/and so on. 
(I think this will lead to more attributes such as Relationship status, allowing to add users as siblings.)
- Updating a circle means that we have to give the users the option to create their own circles, i.e. they can add and remove users from the given circles. (Basically, more changes ... pfffff)

collection_circleVisibility:

- create () is not applicable for visibility settings in general.
- update() we have the "visibility_setting" in the ERD diagram but in the actual database. I think we need to include it in order to be able to update the visibility.
- delete() is not applicable for collection_circleVisibility due to the fact this value is set by default a user can never entirely delete this function 
- I needed to add "visibility_setting" attribute to "setup_database.php" becase we need to refer to it in order to update it.

collection_friendVisibility:

- create () is not applicable for visibility settings in general.
- update() we have the "visibility_setting" in the ERD diagram but in the actual database. I think we need to include it in order to be able to update the visibility.
- delete() is not applicable for collection_circleVisibility due to the fact this value is set by default a user can never entirely delete this function 
- I needed to add "visibility_setting" attribute to "setup_database.php" becase we need to refer to it in order to update it.

============

UPDATE: Tharman, 08/02/2014

Listed below are my responses to the above queries (in order).

circle:
- Users can create their own circles, and these get added to the 'circle' table. Adding friends to the circle is covered by the 'friend_circle' table. This will list the user_id of a friend and the circle they are joined to.
- A user can create their own circle through the UI, and the circle lists their 'user_id' as one of its attributes.
- The system doesn't generate circles at all. It is up to the user to decide who to add to a circle, i.e. friends, family, etc. If the user wants to add a particular set of friends, say from secondary school, they simply search for the users who went to the same school, and then add them. This is a front-end issue I think - we just need to nail down the search function.
NOTE: There could be merit in the 'relationship' attribute idea...it would probably go in the 'user_friend' table.
- The system currently works on the principle that the user creates their own circles... I don't see how could we automatically do this for them...?

collection_circleVisibility:
- I think there was a misunderstanding on the 'circle' creation point - see above. The create() function should be possible given the current schema.
- Good catch! Couldn't see your update though, so I added the field in all of the necessary tables (was missing from quite a few).
- It should be removable, since circles are removable. But we need to discuss deletion more thoroughly anyway.
- Not exactly sure where you have added this...it wasn't in this table from what I could see (using the up-to-date version). I have added it anyway now.

collection_friendVisibility: ALL THE SAME AS ABOVE FOR 'collection_circleVisibility'.

============